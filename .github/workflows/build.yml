on:
  push:
    branches: [ master, generic-bare-metal ]
  pull_request:
  schedule:
    - cron: 0 1 * * 1

name: Build

env:
  CARGO_TERM_COLOR: always
#  RUSTFLAGS: '-D warnings'
#  DRIVERS: >
#    ad983x
#    ads1x1x
#    apds9960
#    bmi160
#    ds1307
#    ds323x
#    eeprom24x
#    embedded-ccs811
#    hdc20xx
#    isl29125
#    kxcj9
#    lm75
#    lsm303agr
#    max170xx
#    max3010x
#    max44009
#    mcp4x
#    mcp49xx
#    mcp794xx
#    mlx9061x
#    mma8x5x
#    opt300x
#    pcf857x
#    pwm-pca9685
#    tcs3472
#    tmp006
#    tmp1x2
#    veml6030
#    veml6075
#    xca9548a

# veml6040 Git version is not compatible. Deactivated until a new version is released.
# veml6070 Git version is not compatible. Deactivated until a new version is released.

jobs:
#  ci-bare-metal:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        rust: [stable, beta]
#        SUBFOLDER:
#          - stm32f3-discovery
#          - stm32f1-bluepill
#          - microbit
#
#        VERSION:
#          - released
#          - git
#
#        include:
#          - SUBFOLDER: stm32f3-discovery
#            TARGET: thumbv7em-none-eabihf
#
#          - SUBFOLDER: stm32f1-bluepill
#            TARGET: thumbv7m-none-eabi
#
#          - SUBFOLDER: microbit
#            TARGET: thumbv6m-none-eabi
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: ${{ matrix.rust }}
#          target: ${{ matrix.TARGET }}
#          override: true
#
#      - name: Checkout CI scripts
#        uses: actions/checkout@v2
#        with:
#          repository: 'eldruin/rust-driver-ci-scripts'
#          ref: 'master'
#          path: 'ci'
#
#      - run: ../ci/patch-no-std.sh
#        working-directory: ${{ matrix.SUBFOLDER }}
#
#      - run: ../ci/patch-git-drivers.sh
#        working-directory: ${{ matrix.SUBFOLDER }}
#        if: contains(matrix.VERSION, 'git')
#
#      - name: Build
#        working-directory: ${{ matrix.SUBFOLDER }}
#        run: cargo build --target=${{ matrix.TARGET }} --examples

  generic-bare-metal:
    name: eg
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        brd: [none-stm32f100, none-stm32f101, bluepill, discovery-stm32f303, blackpill-stm32f401, blackpill-stm32f411, 
              none-stm32f722, none-stm32h742, none-stm32l0x2, 
              ]
              #none-stm32f042, none-stm32f030, 
        
        eg:  [ad9833-midi-player-bp,   ads1015-adc-display,              at24c256-eeprom,   
              bmi160-imu-display,      ccs811-gas-voc-display,           ccs811-gas-voc-hdc2080-display, 
              ds1307-rtc,              hdc2080-temp-humidity-display,    iaq-core-c-gas-voc-display, 
              isl29125-color-display,  max17043-battery-monitor-display, max30102-heart-usart, 
              mcp7940n-rtc-display,    mlx90614-temperature-display,     mlx90615-temperature-display, 
              mma8452-accel-display,   opt3001-als-display,              pca9685-pwm-rgb-led-servos, 
              si4703-fm-radio-display, si4703-fm-radio,                  tcs34725-color-display,
              tmp006-ir-temp-display,  tmp102-temp-display,              veml6030-als-display, 
              veml6070-uv-display,     veml6075-uv-display ]

              #ccs811-gas-voc-usart-logger-bp.rs, iaq-core-c-gas-voc-usart-logger-bp

        include:
           #- brd: "none-stm32f042"  NB commented out sections need brd removed from brd: or matrix is messed up
           #  mcu:  stm32f042
           #  hal: "stm32f0xx"
           #  trg: "thumbv6m-none-eabi"
           #- brd: "none-stm32f030"
           #  mcu:  stm32f030xc
           #  hal: "stm32f0xx"
           #  trg: "thumbv6m-none-eabi"   
           - brd:  "none-stm32f100"
             mcu:  stm32f100
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - brd: "none-stm32f101"
             mcu:  stm32f101
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - brd: "bluepill"
             mcu:  stm32f103
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - brd: "discovery-stm32f303"
             mcu:  stm32f303xc
             hal: "stm32f3xx"
             trg: "thumbv7em-none-eabihf"
           - brd: "blackpill-stm32f401"
             mcu:  stm32f401
             hal: "stm32f4xx"
             trg: "thumbv7em-none-eabihf"
           - brd: "blackpill-stm32f411"
             mcu:  stm32f411
             hal: "stm32f4xx"
             trg: "thumbv7em-none-eabihf"
           - brd: "none-stm32f722"
             mcu:  stm32f722
             hal: "stm32f7xx"
             trg: "thumbv7em-none-eabihf"
           - brd: "none-stm32h742"
             mcu:  stm32h742             
             hal: "stm32h7xx"
             trg: "thumbv7em-none-eabihf"
           - brd: "none-stm32l0x2"
             mcu:  stm32l072kztx
             hal: "stm32l0xx"
             trg: "thumbv6m-none-eabi"
           - brd: "discovery-stm32l100"
             mcu:  stm32l100
             hal: "stm32l1xx"
             trg: "thumbv7m-none-eabi"
           - brd: "heltec-lora-node151"
             mcu:  stm32l151
             hal: "stm32l1xx"
             trg: "thumbv7m-none-eabi"
           - brd: "none-stm32l4x2"
             mcu:  stm32l4x2
             hal: "stm32l4xx"
             trg: "thumbv7em-none-eabi"

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.trg }}
      - name: tree
        #--manifest-path to find Caro.toml.      
        uses: actions-rs/cargo@v1 
        with:
          command: tree
          args:  --manifest-path generic-bare-metal/Cargo.toml 
      - name: Build
        uses: actions-rs/cargo@v1 
        with:
          command: build
          args:  --manifest-path generic-bare-metal/Cargo.toml --no-default-features --release --target ${{ matrix.trg }} --features ${{ matrix.mcu }}
          use-cross: true
      - name: Build example 
        uses: actions-rs/cargo@v1
        with:
          command: build
          args:  --manifest-path  generic-bare-metal/Cargo.toml  --release --target ${{ matrix.trg }} --features ${{ matrix.hal }},${{ matrix.mcu }} --example ${{ matrix.eg }}
          use-cross: true

  ci-rpi:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        SUBFOLDER:
          - raspberrypi

        TARGET:
          - armv7-unknown-linux-gnueabihf

        VERSION:
          - released
          - git

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.TARGET }}
          override: true

      - run: cargo install cross

      - name: Checkout CI scripts
        uses: actions/checkout@v2
        with:
          repository: 'eldruin/rust-driver-ci-scripts'
          ref: 'master'
          path: 'ci'

      - run: ../ci/patch-git-drivers.sh
        working-directory: ${{ matrix.SUBFOLDER }}
        if: contains(matrix.VERSION, 'git')

      - name: Build
        working-directory: ${{ matrix.SUBFOLDER }}
        run: cross build --target=${{ matrix.TARGET }} --examples
